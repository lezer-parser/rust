@precedence {
  preferGenerics
  try
  deref
  call
  params
  macroRules
  macro
  mult @left
  add @left
  shift @left
  bitAnd @left
  bitXor @left
  bitOr @left
  compare @left
  and @left
  or @left
  assign @right
  else @right
  range @left
  cast
  return
  typeArgs
  block
  bind
  bound @left
  typeScope
  scope
  pub
  mut @cut
  statement
}

@skip { whitespace | LineComment | BlockComment }

@top SourceFile {
  InnerAttribute*
  statement*
}

statement {
  declarationStatement |
  AttributeItem |
  blockExpression !statement |
  nonBlockExpression ";"
}

AttributeItem { Attribute+ declarationStatement }

declarationStatement {
  ConstItem {
    visibility? kw<"const"> Identifier ":" type ("=" expression)? ";"
  } |
  MacroInvocation !statement |
  MacroDefinition {
    ckw<"macro_rules"> !macroRules "!" Identifier (
      MacroRules { "(" (MacroRule ";")* MacroRule? ")" } ";" |
      MacroRules { "{" (MacroRule ";")* MacroRule? "}" }
    )
  } |
  EmptyStatement { ";" } |
  ModItem {
    visibility? kw<"mod"> Identifier (";" | DeclarationList)
  } |
  ForeignModItem {
    visibility? externModifier (";" | DeclarationList)
  } |
  StructItem {
    visibility? kw<"struct">
    TypeIdentifier TypeParamList?
    (WhereClause? FieldDeclarationList | OrderedFieldDeclarationList WhereClause? ";" | ";")
  } |
  UnionItem {
    visibility? ckw<"union">
    TypeIdentifier TypeParamList? WhereClause? FieldDeclarationList
  } |
  EnumItem {
    visibility? kw<"enum"> TypeIdentifier TypeParamList? WhereClause?
    EnumVariantList { "{" commaSep<Attribute* EnumVariant> "}" }
  } |
  TypeItem {
    visibility? kw<"type"> TypeIdentifier TypeParamList? "=" type ";"
  } |
  FunctionItem {
    visibility? functionModifier* kw<"fn">
    (Identifier | Metavariable) TypeParamList? ParamList ("->" type)?
    WhereClause?
    (Block | ";")
  } |
  ImplItem {
    kw<"unsafe">? kw<"impl"> TypeParamList?
    ("!"? typePath kw<"for">)? type
    WhereClause? DeclarationList
  } |
  TraitItem {
    visibility? kw<"unsafe">? kw<"trait"> TypeIdentifier TypeParamList? TraitBounds? WhereClause? DeclarationList
  } |
  AssociatedType {
    kw<"type"> TypeIdentifier TraitBounds? ";"
  } |
  LetDeclaration {
    kw<"let"> (!mut kw<"mut">)? pattern (":" type)? ("=" expression)? ";"
  } |
  UseDeclaration {
    visibility? kw<"use"> useClause ";"
  } |
  ExternCrateDeclaration {
    visibility? kw<"extern"> kw<"crate"> Identifier (kw<"as"> Identifier)? ";"
  } |
  StaticItem {
    visibility? kw<"static"> kw<"ref">? kw<"mut">? Identifier ":" type ("=" expression)? ";"
  }
}

MacroRule {
  tokenTree "=>" BracketedTokens
}

tokenTree {
  BracketedTokens |
  TokenBindingPattern {
    Metavariable !bind ":" Identifier
  } |
  TokenRepetitionPattern {
    "$" "(" tokenTree* ")" ("+" | "*" | "?")
  } |
  String |
  RawString |
  Char |
  Integer |
  Float
  tokenIdentifier |
  Metavariable |
  // FIXME all ops
  UpdateOp | CompareOp | CompareOp { "<" } |
  "." | ";" | ":" | "=" | "+" | "*" | "&" | "->" | ".." | "..." | "&" | "::" | "!" | "#"
}

BracketedTokens {
  "(" tokenTree* ")" |
  "[" tokenTree* "]" |
  "{" tokenTree* "}"
}

Attribute {
  "#" "[" MetaItem "]"
}

InnerAttribute {
  "#" "!" "[" MetaItem "]"
}

MetaItem {
  path ("=" literal | "(" commaSep<MetaItem | literal> ")")?
}

DeclarationList {
  "{" InnerAttribute* (declarationStatement | AttributeItem)* "}"
}

EnumVariant {
  visibility? Identifier (FieldDeclarationList | OrderedFieldDeclarationList)? ("=" expression)?
}

FieldDeclarationList {
  "{" commaSep<Attribute* FieldDeclaration> "}"
}

FieldDeclaration {
  visibility? FieldIdentifier ":" type
}

OrderedFieldDeclarationList {
  "(" commaSep<Attribute* visibility? type> ")"
}

functionModifier {
  kw<"async"> | ckw<"default"> | kw<"const"> | kw<"unsafe"> | externModifier
}

WhereClause {
  kw<"where"> commaSep1<WherePredicate>
}

WherePredicate {
  type TraitBounds
}

TraitBounds {
  ":" plusSep<type | Lifetime | HigherRankedTraitBound | RemovedTraitBound>
}

HigherRankedTraitBound {
  kw<"for"> TypeParamList type
}

RemovedTraitBound {
  "?" type
}

TypeParamList {
  tpOpen commaSep<(
    Lifetime |
    Metavariable |
    TypeIdentifier |
    ConstrainedTypeParameter |
    OptionalTypeParameter |
    ConstParameter
  ) !preferGenerics> tpClose
}

ConstParameter {
  kw<"const"> Identifier ":" type
}

ConstrainedTypeParameter {
  (Lifetime | TypeIdentifier) TraitBounds
}

OptionalTypeParameter {
  (TypeIdentifier | ConstrainedTypeParameter) "=" type
}

useClause {
  simplePath |
  UseAsClause { simplePath kw<"as"> Identifier } |
  UseList |
  ScopedUseList { simplePath !scope "::" UseList } |
  UseWildcard { simplePath !scope "::" "*" }
}

UseList {
  "{" commaSep<useClause> "}"
}

ParamList {
  "(" commaSep<Attribute* (Parameter | SelfParameter | "..." | kw<"_">)> ")"
}

SelfParameter {
  "&"? Lifetime? kw<"mut">? kw<"self">
}

Parameter {
  (!mut kw<"mut">)? pattern ":" type
}

externModifier {
  kw<"extern"> String?
}

visibility {
  kw<"pub"> (!call "(" (kw<"self"> | kw<"super"> | kw<"crate"> | kw<"in"> path) ")")?
}

type {
  AbstractType { kw<"impl"> (typePath | GenericType | FunctionType) } |
  ReferenceType { "&" Lifetime? kw<"mut">? type } |
  PointerType { "*" (kw<"const"> | kw<"mut">) type } |
  typePath |
  GenericType |
  TupleType { "(" commaSep1<type> ")" } |
  UnitType { "(" ")" } |
  ArrayType { "[" type (";" expression)? "]" } |
  FunctionType |
  MacroInvocation { typePath !macro "!" BracketedTokens } |
  EmptyType { "!" } |
  DynamicType { kw<"dyn"> (typePath | GenericType | FunctionType) } |
  BoundedType { Lifetime !bound "+" type | type !bound "+" type | type !bound "+" Lifetime }
}

FunctionType {
  (typePath | functionModifier* kw<"fn">)
  !params ParamList ("->" type)?
}

GenericType {
  typePath !typeArgs TypeArgList
}

TypeArgList {
  tpOpen commaSep1<type | TypeBinding | Lifetime | literal | Block> tpClose
}

TypeBinding {
  TypeIdentifier "=" type
}

expression { blockExpression | nonBlockExpression }

nonBlockExpression {
  UnaryExpression { ("-" | "*" | "!") expression } |
  ReferenceExpression { "&" kw<"mut">? expression } |
  TryExpression { expression !try "?" } |
  BinaryExpression |
  AssignmentExpression { expression !assign ("=" | UpdateOp) expression } |
  TypeCastExpression { expression !cast kw<"as"> type } |
  ReturnExpression { kw<"return"> (!return expression)? } |
  RangeExpression { expression? !range (".." | "..." | "..=") expression? } |
  CallExpression { expression !call ArgList } |
  literal |
  path |
  AwaitExpression { expression !deref "." kw<"await"> } |
  FieldExpression |
  GenericFunction { (path | FieldExpression) !scope "::" TypeArgList } |
  BreakExpression { kw<"break"> LoopLabel? (!return expression)? } |
  ContinueExpression { kw<"continue"> LoopLabel? } |
  IndexExpression { expression !deref "[" expression "]" } |
  ArrayExpression { "[" InnerAttribute* (expression ";" expression | commaSep1<expression>)? "]" } |
  TupleExpression { "(" InnerAttribute* expression ("," expression?)+ ")" } |
  MacroInvocation |
  UnitExpression { "(" ")" } |
  ClosureExpression { kw<"move">? ClosureParamList (("->" type)? !statement Block | expression) } |
  ParenthesizedExpression { "(" InnerAttribute* expression ")" } |
  StructExpression { structName FieldInitializerList }
}

FieldExpression { expression !deref "." (FieldIdentifier | Integer) }

blockExpression {
  UnsafeBlock { kw<"unsafe"> Block } |
  AsyncBlock { kw<"async"> kw<"move">? Block } |
  Block |
  IfExpression |
  MatchExpression {
   kw<"match"> expression MatchBlock { "{" InnerAttribute* (MatchArm<",">* MatchArm<","?>)? "}" }
  } |
  WhileExpression {
    (LoopLabel ":")? kw<"while"> cond Block
  } |
  LoopExpression {
    (LoopLabel ":")? kw<"loop"> Block
  } |
  ForExpression {
    (LoopLabel ":")? kw<"for"> pattern kw<"in"> expression Block
  }
}

MacroInvocation {
  path !macro "!" BracketedTokens
}

QualifiedScope { tpOpen type (kw<"as"> type)? tpClose }

pathIdent<and> {
  kw<"self"> |
  Metavariable |
  kw<"super"> |
  kw<"crate"> |
  and
}

pathSegment {
  pathIdent<ScopeIdentifier | kw<"Self">> ~path !scope "::" (TypeArgList "::")?
}

path {
  pathIdent<Identifier | kw<"Self">> ~path |
  ScopedIdentifier {
    (("::" | QualifiedScope !scope "::") pathSegment* | pathSegment+) pathIdent<Identifier | kw<"Self">> ~path
  }
}

typePathSegment {
  pathIdent<ScopeIdentifier> ~path ((!scope "::")? TypeArgList)? !scope "::"
}

typePath {
  pathIdent<TypeIdentifier> ~path |
  ScopedTypeIdentifier {
    (("::" | QualifiedScope !scope "::") typePathSegment* | typePathSegment+) pathIdent<TypeIdentifier> ~path
  }
}

simplePath {
  pathIdent<Identifier> ~path |
  ScopedIdentifier {
    ("::" (pathIdent<ScopeIdentifier> ~path !scope "::")* | (pathIdent<ScopeIdentifier> ~path !scope "::")+)
    pathIdent<Identifier> ~path
  }
}

structName {
  pathIdent<TypeIdentifier | kw<"Self">> ~path |
  ScopedTypeIdentifier {
    (("::" | QualifiedScope !scope "::") pathSegment* | pathSegment+) pathIdent<TypeIdentifier | kw<"Self">> ~path
  }
}

BinaryExpression {
  expression !add ArithOp { "+" | "-" } expression |
  expression !mult ArithOp { "*" | "/" | "%" } expression |
  expression !shift BitOp { "<<" | ">>" } expression |
  expression !bitAnd BitOp { "&" } expression |
  expression !bitXor BitOp { "^" } expression |
  expression !bitOr BitOp { "|" } expression |
  expression !compare (CompareOp | CompareOp { "<" }) expression |
  expression !and LogicOp { "&&" } expression |
  expression !or LogicOp { "||" } expression
}

ArgList {
  "(" commaSep<Attribute* expression> ")"
}

FieldInitializerList {
  "{" commaSep<fieldInitializer> "}"
}

fieldInitializer {
  ShorthandFieldInitializer { Attribute* Identifier } |
  FieldInitializer { Attribute* FieldIdentifier ":" expression } |
  BaseFieldInitializer { ".." expression }
}

IfExpression {
  kw<"if"> cond Block (!else kw<"else"> (Block | IfExpression))?
}

cond {
  expression |
  LetDeclaration { kw<"let"> pattern "=" expression }
}

Guard { kw<"if"> expression }

MatchArm<after> {
  Attribute*
  (MacroInvocation | pattern) ("|" (MacroInvocation | pattern))*
  Guard?
  "=>" (nonBlockExpression after | !block blockExpression)
}

ClosureParamList[name=ParamList] {
  closureParamDelim commaSep<Parameter { (!mut kw<"mut">)? pattern (":" type)?}> closureParamDelim
}

Block { "{" InnerAttribute* statement* expression? "}" }

pattern {
  literalPattern |
  path |
  TuplePattern { path? "(" commaSep<pattern> ")" } |
  StructPattern {
    structName
    FieldPatternList { "{" commaSep<FieldPattern | ".."> "}" }
  } |
  RefPattern { kw<"ref"> pattern } |
  SlicePattern { "[" commaSep<pattern> "]" } |
  CapturedPattern { Identifier "@" pattern } |
  ReferencePattern { "&" !mut kw<"mut">? pattern } |
  ".." |
  MutPattern { kw<"mut"> pattern } |
  RangePattern { (literalPattern | path) ("..." | "..=") (literalPattern | path) } |
  kw<"_">
}

FieldPattern {
  kw<"ref">? (!mut kw<"mut">)? (Identifier | FieldIdentifier ":" pattern)
}

literal {
  String |
  RawString |
  Char |
  boolean |
  Integer |
  Float
}

literalPattern {
  literal |
  NegatedPattern { ArithOp { "-" } (Integer | Float) }
}

boolean { @specialize[name=Boolean]<identifier, "true" | "false"> }

@skip {} {
  BlockComment { "/*" (BlockComment | blockCommentContent)* "*/" }

  String { stringStart (Escape | stringContent) stringEnd }
}

Identifier { identifier }

TypeIdentifier { identifier }

FieldIdentifier { identifier }

ScopeIdentifier { identifier }

LoopLabel { quoteIdentifier }

Lifetime { quoteIdentifier }

kw<term> { @specialize[name={term}]<identifier, term> }

ckw<term> { @extend[name={term}]<identifier, term> }

commaSep<expr> { commaSep1<expr>? }

commaSep1<expr> { expr ("," expr?)* }

plusSep<expr> { expr ("+" expr)* }

@external tokens tokens from "./tokens" { RawString, Float, closureParamDelim[name="|"] }

tpOpen[name="<"] { "<" }

@tokens {
  whitespace { $[ \t\r\n] }

  UpdateOp { ($[+\-*/%^&|] | "<<" | ">>") "=" }

  CompareOp { ">" "="? | "<=" | $[!=] "=" }

  tpClose[name=">"] { ">" }

  Integer {
    ($[0-9] $[0-9_]* |
     "0x" $[0-9a-fA-F_]+ |
     "0b" $[01_]+ |
     "0o" $[0-7_]+)
    (("u" | "i") ("8" | "16" | "32" | "64" | "128" | "size"))?
  }

  hex { $[0-9a-fA-F] }
  Escape { "\\" (![xu] | "u" hex hex hex hex | "u{" hex+ "}" | "x" hex hex) }

  Char { "b"? "'" (Escape | ![\\'])? "'" }

  LineComment { "//" ![\n]* }

  blockCommentContent { ![*/] blockCommentContent? | "*" blockCommentStar | "/" blockCommentSlash }
  blockCommentStar { ![/*] blockCommentContent | "*" blockCommentStar }
  blockCommentSlash { ![/*] blockCommentContent | "/" blockCommentSlash }

  @precedence { LineComment, "/" }

  stringStart { "b"? '"' }
  stringContent { !["\\\n]* "\n" | !["\\\n]+ }
  stringEnd { '"' }

  identBase { $[a-zA-Zα-ωΑ-Ωµ_] $[a-zA-Zα-ωΑ-Ωµ0-9_]* }
  identifier { ("r#")? identBase }
  tokenIdentifier[name=Identifier] { identBase }
  quoteIdentifier { "'" identBase }
  Metavariable { "$" identBase }

  @precedence { stringStart, Char, identifier }
  @precedence { stringStart, Char, tokenIdentifier }
  @precedence { Char, quoteIdentifier }
  @precedence { Metavariable, "$" }

  "[" "]" "{" "}" "(" ")"
  ";" ":" "::" "," ">"
  "=" "->" ".." "..." "&"
}

@detectDelim
